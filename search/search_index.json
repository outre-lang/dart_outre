{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>The language syntax is a mix of Go and JavaScript. It is also highly dynamic with only basic features. Beize script files have an <code>.beize</code> extension. The program can be compiled using Beize Compiler and can be run on Beize VM.</p> <p>Info</p> <ul> <li>Optional things are mentioned within brackets (<code>[]</code>). Escaped brackets (<code>\\[\\]</code>) says that they are part of the syntax itself.</li> </ul>"},{"location":"#comments","title":"Comments","text":"<p>Words in a line after <code>#</code> are comments. Multi-line comments are not supported.</p> <pre><code># This is a comment.\n</code></pre>"},{"location":"#keywords","title":"Keywords","text":"<pre><code>true\nfalse\nnull\nif\nelse\nwhile\nfun\nreturn\nbreak\ncontinue\nobj\ntry\ncatch\nthrow\nimport\nas\nlist\nmap\nwhen\nmatch\n</code></pre>"},{"location":"#identifiers","title":"Identifiers","text":"<p>Identifiers are made up of alphabets (<code>A-Z</code>, <code>a-z</code>), dollar sign (<code>$</code>) and underscore (<code>_</code>). Numbers (<code>0-9</code>) can also be used but are not allowed at the start of an identifier. Keywords cannot be used as identifiers.</p> <p>Beize does not have a standard naming convention but camel-case is preferred.</p> <pre><code>helloWorld\nHelloWorld\n_helloWorld\n$HELLO_WORLD\nhello_world\n$hello123\n</code></pre>"},{"location":"#expressions","title":"Expressions","text":"<p>Expression is a piece of code that is evaluated to a value. Literals, operations using operators, identifiers come under expressions.</p> <pre><code>helloWorld\n1 + 2\n\"Hello World!\"\n</code></pre> <p>Info</p> <p>Trailing commas are allowed in function parameters, function call, object key-value pairs and list values. For example, <code>[1, 2, 3,]</code> is perfectly valid and same as <code>[1, 2, 3]</code>.</p>"},{"location":"#statements","title":"Statements","text":"<p>Statements is a line of code that commands a task. Each program is made up of sequence of statements. Statements must end with a semi-colon (<code>;</code>).</p>"},{"location":"Data-Types/boolean/","title":"Boolean","text":"<p>Represents truthiness using <code>true</code> or <code>false</code>.</p> Syntax<pre><code>true\nfalse\n</code></pre>"},{"location":"Data-Types/function/","title":"Function","text":"<p>Represents a callable object. Functions are prefixed with right arrow operator (<code>-&gt;</code>). They are anonymous and cannot have a named unlike other programming languages. They are invoked using call operator. They can take in parameters and may return values.</p> <p>Functions can marked as <code>async</code> to allow usage of <code>.await</code>. These functions always return a <code>unawaited</code> value. The async function is not executed until <code>.await</code> is invoked.</p> Syntax<pre><code>-&gt; [async] [param1, param2, ..., paramN] {\n    statements\n}\n\n-&gt; [async] [param1, param2, ..., paramN] : expr\n</code></pre> Example<pre><code>-&gt; { return 1; }\n-&gt; a, b { return a + b; }\n\n-&gt; a, b : a + b\n-&gt; x : x\n\n-&gt; async { return 1; }\n-&gt; async a, b { return a + b; }\n\n-&gt; async a, b : a + b\n-&gt; async x : x\n</code></pre>"},{"location":"Data-Types/function/#properties","title":"Properties","text":""},{"location":"Data-Types/function/#call","title":"<code>call</code>","text":"<p>Calls the function and returns the result.</p> Signature<pre><code>-&gt; List&lt;Any&gt; params : Any\n</code></pre> Signature (Async Function)<pre><code>-&gt; List&lt;Any&gt; params : Unawaited&lt;Any&gt;\n</code></pre> Example<pre><code>printHello := -&gt; value {\n    print(value);\n};\n\nprintHelloAsync := -&gt; async value {\n    print(value);\n};\n\n# prints \"Hello World!\"\nprintHello.call([\"Hello World!\"]);\n\n# prints \"Hello World!\"\nprintHelloAsync.call([\"Hello World!\"]).await;\n</code></pre>"},{"location":"Data-Types/list/","title":"List","text":"<p>Represents a list of values.</p> Syntax<pre><code>\\[[expr1, expr2, ..., exprN]\\]\n</code></pre> Example<pre><code>[]\n[1, 2, 3]\n</code></pre>"},{"location":"Data-Types/list/#properties","title":"Properties","text":""},{"location":"Data-Types/list/#push","title":"<code>push</code>","text":"<p>Adds <code>value</code> to the list.</p> Signature<pre><code>-&gt; Any value : Null\n</code></pre> Example<pre><code>list := [\"foo\"];\nlist.push(\"bar\");\n\n# prints [\"foo\", \"bar\"]\nprint(list);\n</code></pre>"},{"location":"Data-Types/list/#pushall","title":"<code>pushAll</code>","text":"<p>Adds all values of <code>values</code> to the list.</p> Signature<pre><code>-&gt; List&lt;Any&gt; values : Null\n</code></pre> Example<pre><code>list := [\"foo\"];\nlist.pushAll([\"bar\", \"baz\"]);\n\n# prints [\"foo\", \"bar\", \"baz\"]\nprint(list);\n</code></pre>"},{"location":"Data-Types/list/#pop","title":"<code>pop</code>","text":"<p>Removes the last element.</p> Signature<pre><code>-&gt; : Null\n</code></pre> Example<pre><code>list := [\"foo\", \"bar\"];\nlist.pop();\n\n# prints [\"foo\"]\nprint(list);\n</code></pre>"},{"location":"Data-Types/list/#clear","title":"<code>clear</code>","text":"<p>Removes all the elements.</p> Signature<pre><code>-&gt; : Null\n</code></pre> Example<pre><code>list := [\"foo\", \"bar\"];\nlist.pop();\n\n# prints [\"foo\"]\nprint(list);\n</code></pre>"},{"location":"Data-Types/list/#length","title":"<code>length</code>","text":"<p>Returns length of the list.</p> Signature<pre><code>-&gt; : Number\n</code></pre> Example<pre><code>list := [\"foo\", \"bar\"];\n\n# prints 2\nprint(list.length());\n</code></pre>"},{"location":"Data-Types/list/#isempty","title":"<code>isEmpty</code>","text":"<p>Is the list empty?</p> Signature<pre><code>-&gt; : Boolean\n</code></pre> Example<pre><code>list := [\"foo\", \"bar\"];\n\n# prints false\nprint(list.isEmpty());\n</code></pre>"},{"location":"Data-Types/list/#isnotempty","title":"<code>isNotEmpty</code>","text":"<p>Is the list not empty?</p> Signature<pre><code>-&gt; : Boolean\n</code></pre> Example<pre><code>list := [\"foo\", \"bar\"];\n\n# prints true\nprint(list.isNotEmpty());\n</code></pre>"},{"location":"Data-Types/list/#clone","title":"<code>clone</code>","text":"<p>Returns clone of the list.</p> Signature<pre><code>-&gt; : List&lt;Any&gt;\n</code></pre> Example<pre><code>list := [\"foo\", \"bar\"];\ncloned = list.clone();\n\n# prints [\"foo\", \"bar\"]\nprint(cloned);\n</code></pre>"},{"location":"Data-Types/list/#reversed","title":"<code>reversed</code>","text":"<p>Returns reversed clone of the list.</p> Signature<pre><code>-&gt; : List&lt;Any&gt;\n</code></pre> Example<pre><code>list := [\"foo\", \"bar\"];\nreversed := list.reversed();\n\n# prints [\"bar\", \"foo\"]\nprint(reversed);\n</code></pre>"},{"location":"Data-Types/list/#contains","title":"<code>contains</code>","text":"<p>Check if <code>element</code> is present in the list.</p> Signature<pre><code>-&gt; Any element : Boolean\n</code></pre> Example<pre><code>list := [\"foo\", \"bar\"];\n\n# prints true\nprint(list.contains(\"bar\"));\n</code></pre>"},{"location":"Data-Types/list/#indexof","title":"<code>indexOf</code>","text":"<p>Returns the index of <code>element</code> in the list.</p> Signature<pre><code>-&gt; Any element : Boolean\n</code></pre> Example<pre><code>list := [\"foo\", \"bar\", \"foo\"];\n\n# prints 0\nprint(list.indexOf(\"foo\"));\n</code></pre>"},{"location":"Data-Types/list/#lastindexof","title":"<code>lastIndexOf</code>","text":"<p>Returns the last index of <code>element</code> in the list.</p> Signature<pre><code>-&gt; Any element : Boolean\n</code></pre> Example<pre><code>list := [\"foo\", \"bar\", \"foo\"];\n\n# prints 2\nprint(list.lastIndexOf(\"foo\"));\n</code></pre>"},{"location":"Data-Types/list/#remove","title":"<code>remove</code>","text":"<p>Removes all <code>element</code> from the list.</p> Signature<pre><code>-&gt; Any element : Boolean\n</code></pre> Example<pre><code>list := [\"foo\", \"bar\"];\nlist.remove(\"bar\");\n\n# prints [\"foo\"]\nprint(list);\n</code></pre>"},{"location":"Data-Types/list/#sublist","title":"<code>sublist</code>","text":"<p>Returns a sub-list consisting elements between <code>start</code> and <code>end</code> (exclusive).</p> Signature<pre><code>-&gt; Number start, Number end : List&lt;Any&gt;\n</code></pre> Example<pre><code>list := [\"foo\", \"bar\", \"baz\"];\nsublist := list.sublist(0, 2);\n\n# prints [\"foo\", \"bar\"]\nprint(sublist);\n</code></pre>"},{"location":"Data-Types/list/#find","title":"<code>find</code>","text":"<p>Returns the matched element using the <code>predicate</code>.</p> Signature<pre><code>-&gt; (-&gt; Any element : Boolean) predicate : Any\n</code></pre> Example<pre><code>list := [\n    { value: \"foo\" },\n    { value: \"bar\" },\n];\n\n# prints { value: \"foo\" }\nprint(list.find(-&gt; x : x.value == \"foo\"));\n</code></pre>"},{"location":"Data-Types/list/#findindex","title":"<code>findIndex</code>","text":"<p>Returns the index of matched element using the <code>predicate</code>.</p> Signature<pre><code>-&gt; (-&gt; Any element : Boolean) predicate : Number\n</code></pre> Example<pre><code>list := [\n    { value: \"foo\" },\n    { value: \"bar\" },\n];\n\n# prints 1\nprint(list.findIndex(-&gt; x : x.value == \"bar\"));\n</code></pre>"},{"location":"Data-Types/list/#findlastindex","title":"<code>findLastIndex</code>","text":"<p>Returns the last index of matched element using the <code>predicate</code>.</p> Signature<pre><code>-&gt; (-&gt; Any element : Boolean) predicate : Number\n</code></pre> Example<pre><code>list := [\n    { value: \"foo\" },\n    { value: \"bar\" },\n    { value: \"foo\" },\n];\n\n# prints 2\nprint(list.findLastIndex(-&gt; x : x.value == \"foo\"));\n</code></pre>"},{"location":"Data-Types/list/#map","title":"<code>map</code>","text":"<p>Returns the list of mapped values using <code>predicate</code>.</p> Signature<pre><code>-&gt; (-&gt; Any element : Any) predicate : List&lt;Any&gt;\n</code></pre> Example<pre><code>list := [\n    { value: \"foo\" },\n    { value: \"bar\" },\n];\nmapped := list.map(-&gt; x : x.value);\n\n# prints [\"foo\", \"bar\"]\nprint(mapped);\n</code></pre>"},{"location":"Data-Types/list/#filter","title":"<code>filter</code>","text":"<p>Returns the list of filtered values using <code>predicate</code>.</p> Signature<pre><code>-&gt; (-&gt; Any element : Boolean) predicate : List&lt;Any&gt;\n</code></pre> Example<pre><code>list := [\"foo\", \"bar\", \"baz\"];\nfiltered := list.filter(-&gt; x : x.value == \"foo\");\n\n# prints [\"bar\", \"baz\"]\nprint(filtered);\n</code></pre>"},{"location":"Data-Types/list/#sort","title":"<code>sort</code>","text":"<p>Returns the sorted list of using <code>sortBy</code>.</p> Signature<pre><code>-&gt; (-&gt; Any a, Any b : Number) sortBy : List&lt;Any&gt;\n</code></pre> Example<pre><code>list := [\"c\", \"a\", \"b\"];\nsorted := list.sort(-&gt; a, b : a.compareTo(b));\n\n# prints [\"a\", \"b\", \"c\"]\nprint(sorted);\n</code></pre>"},{"location":"Data-Types/list/#flat","title":"<code>flat</code>","text":"<p>Returns the flattened list of level <code>level</code>.</p> Signature<pre><code>-&gt; Number level : List&lt;Any&gt;\n</code></pre> Example<pre><code>list := [[\"foo\", \"bar\"], [\"baz\"]];\nflattened := list.flat(1);\n\n# prints [\"foo\", \"bar\", \"baz\"]\nprint(flattened);\n</code></pre>"},{"location":"Data-Types/list/#flatdeep","title":"<code>flatDeep</code>","text":"<p>Returns the deep flattened list.</p> Signature<pre><code>-&gt; : List&lt;Any&gt;\n</code></pre> Example<pre><code>list := [[\"foo\", [\"bar\"]], [\"baz\"]];\nflattened := list.flatDeep();\n\n# prints [\"foo\", \"bar\", \"baz\"]\nprint(flattened);\n</code></pre>"},{"location":"Data-Types/list/#unique","title":"<code>unique</code>","text":"<p>Returns the list of unique elements.</p> Signature<pre><code>-&gt; : List&lt;Any&gt;\n</code></pre> Example<pre><code>list := [\"foo\", \"bar\", \"foo\"];\nunique := list.unique();\n\n# prints [\"foo\", \"bar\"]\nprint(unique);\n</code></pre>"},{"location":"Data-Types/list/#foreach","title":"<code>forEach</code>","text":"<p>Iterates the list using <code>predicate</code>.</p> Signature<pre><code>-&gt; (-&gt; Any element : Null) predicate : Null\n</code></pre> Example<pre><code>list1 := [\"foo\", \"bar\"];\nlist2 := [];\n\nlist1.forEach(-&gt; x : list2.add(x));\n\n# prints [\"foo\", \"bar\"]\nprint(list2);\n</code></pre>"},{"location":"Data-Types/list/#join","title":"<code>join</code>","text":"<p>Returns the elements converted to string, joined by <code>delimiter</code>.</p> Signature<pre><code>-&gt; String delimiter : String\n</code></pre> Example<pre><code>list := [\"foo\", \"bar\"];\n\n# prints \"foo, bar\"\nprint(list.join(\", \"));\n</code></pre>"},{"location":"Data-Types/null/","title":"Null","text":"<p>Represents a <code>null</code> value. Also can be called as <code>void</code> or nothing.</p> Syntax<pre><code>null\n</code></pre>"},{"location":"Data-Types/number/","title":"Number","text":"<p>Represents a double-precision floating point value. Supports exponents (<code>XeY</code>) and hexadecimal (<code>0xAAAAAAAA</code>) values. <code>NaN</code> is used to denote a invalid number. Infinity, negative infinity and <code>NaN</code> can be created using native number helpers.</p> Syntax (RegExp)<pre><code>-?\\d+(\\.\\d+)?\n-?\\d+(\\.\\d+)?e(\\+|-)?\\d+\n-?0[Xx][A-Fa-f]+\n</code></pre> Example<pre><code>0\n-140\n-9.2\n100\n250.67\n10e2\n10e-4\n0xfff\n</code></pre>"},{"location":"Data-Types/number/#properties","title":"Properties","text":""},{"location":"Data-Types/number/#sign","title":"<code>sign</code>","text":"<p>Returns the <code>-1</code> (less than zero), <code>0</code> (zero) or <code>1</code> (greater than zero).</p> Signature<pre><code>-&gt; : Number\n</code></pre> Example<pre><code>num := -5;\n\n# prints -1\nprint(num.sign());\n</code></pre>"},{"location":"Data-Types/number/#isfinite","title":"<code>isFinite</code>","text":"<p>Is the number finite?</p> Signature<pre><code>-&gt; : Boolean\n</code></pre> Example<pre><code>num := 5;\n\n# prints true\nprint(num.isFinite());\n</code></pre>"},{"location":"Data-Types/number/#isinfinite","title":"<code>isInfinite</code>","text":"<p>Is the number infinite?</p> Signature<pre><code>-&gt; : Boolean\n</code></pre> Example<pre><code>num := 5;\n\n# prints false\nprint(num.isInfinite());\n</code></pre>"},{"location":"Data-Types/number/#isnan","title":"<code>isNaN</code>","text":"<p>Is the number <code>NaN</code>?</p> Signature<pre><code>-&gt; : Boolean\n</code></pre> Example<pre><code>num := 5;\n\n# prints false\nprint(num.isNaN());\n</code></pre>"},{"location":"Data-Types/number/#isnegative","title":"<code>isNegative</code>","text":"<p>Is the number negative?</p> Signature<pre><code>-&gt; : Boolean\n</code></pre> Example<pre><code>num := 5;\n\n# prints false\nprint(num.isNegative());\n</code></pre>"},{"location":"Data-Types/number/#abs","title":"<code>abs</code>","text":"<p>Returns the number without sign.</p> Signature<pre><code>-&gt; : Number\n</code></pre> Example<pre><code>num := -5;\n\n# prints 5\nprint(num.abs());\n</code></pre>"},{"location":"Data-Types/number/#ceil","title":"<code>ceil</code>","text":"<p>Returns the number rounded towards positive infinity.</p> Signature<pre><code>-&gt; : Number\n</code></pre> Example<pre><code>num := 5.1;\n\n# prints 6\nprint(num.ceil());\n</code></pre>"},{"location":"Data-Types/number/#round","title":"<code>round</code>","text":"<p>Returns the number rounded towards negative infinity.</p> Signature<pre><code>-&gt; : Number\n</code></pre> Example<pre><code>num := 5.5;\n\n# prints 6\nprint(num.round());\n</code></pre>"},{"location":"Data-Types/number/#truncate","title":"<code>truncate</code>","text":"<p>Returns the number discarding fractional digits.</p> Signature<pre><code>-&gt; : Number\n</code></pre> Example<pre><code>num := 5.45;\n\n# prints 5\nprint(num.truncate());\n</code></pre>"},{"location":"Data-Types/number/#precisionstring","title":"<code>precisionString</code>","text":"<p>Returns the number string with specified precision.</p> Signature<pre><code>-&gt; Number digits : String\n</code></pre> Example<pre><code>num := 5.2512;\n\n# prints \"5.25\"\nprint(num.precisionString(2));\n</code></pre>"},{"location":"Data-Types/number/#toradixstring","title":"<code>toRadixString</code>","text":"<p>Returns the radix equivalent of the number.</p> Signature<pre><code>-&gt; Number radix : String\n</code></pre> Example<pre><code>num := 5;\n\n# prints 101\nprint(num.toRadixString(2));\n</code></pre>"},{"location":"Data-Types/object/","title":"Object","text":"<p>Represents a pair of keys and values. Objects are not created from classes since classes do not even exist. The keys are parsed as identifiers and values are parsed as expressions. Any keys using surrounding brackets (<code>[]</code>) are parsed as expressions. They properties can be accessed using the get and set operators.</p> Syntax<pre><code>{\n    [property: expr,]\n    ...\n    [\\[expr\\]: expr,]\n    ...\n}\n</code></pre> Example<pre><code>{}\n\n{\n    hello1: \"world1\",\n    [\"hello2\"]: \"world2\",\n    [1]: \"world3\",\n}\n</code></pre>"},{"location":"Data-Types/string/","title":"String","text":"<p>Represents a string value. Strings can be prefixed with <code>r</code> to parse them as they are. Strings are always multi-line.</p> Syntax (RegExp)<pre><code>'[\\S\\s]*'\n\"[\\S\\s]*\"\nr'[\\S\\s]*'\nr\"[\\S\\s]*\"\n</code></pre> Example<pre><code>'Hello'\n\"Hello\"\nr'This is a raw string'\nr\"This is a raw string\"\n'Supports escape sequences like \\t \\n'\n\"but also unicodes like \\u0041 and \\x41\"\n\n'Easy\nand\npeasy'\n</code></pre>"},{"location":"Data-Types/string/#properties","title":"Properties","text":""},{"location":"Data-Types/string/#isempty","title":"<code>isEmpty</code>","text":"<p>Is string empty?</p> Signature<pre><code>-&gt; : Boolean\n</code></pre> Example<pre><code>str := \"Hello World!\";\n\n# prints false\nprint(str.isEmpty());\n</code></pre>"},{"location":"Data-Types/string/#isnotempty","title":"<code>isNotEmpty</code>","text":"<p>Is string not empty?</p> Signature<pre><code>-&gt; : Boolean\n</code></pre> Example<pre><code>str := \"Hello World!\";\n\n# prints true\nprint(str.isNotEmpty());\n</code></pre>"},{"location":"Data-Types/string/#length","title":"<code>length</code>","text":"<p>Length of the string.</p> Signature<pre><code>-&gt; : Number\n</code></pre> Example<pre><code>str := \"Hello World!\";\n\n# prints 12\nprint(str.length());\n</code></pre>"},{"location":"Data-Types/string/#compareto","title":"<code>compareTo</code>","text":"<p>Compare to another string. Returns <code>0</code> if equal.</p> Signature<pre><code>-&gt; String other : Number\n</code></pre> Example<pre><code>str1 := \"Hello\";\nstr2 := \"World\";\n\n# prints -1\nprint(str1.compareTo(str2));\n</code></pre>"},{"location":"Data-Types/string/#contains","title":"<code>contains</code>","text":"<p>Check if <code>other</code> is present in the string.</p> Signature<pre><code>-&gt; String other : Boolean\n</code></pre> Example<pre><code>str := \"Hello World!\";\n\n# prints true\nprint(str.contains(\"!\"));\n</code></pre>"},{"location":"Data-Types/string/#startswith","title":"<code>startsWith</code>","text":"<p>Check if the string is prefixed with <code>other</code>.</p> Signature<pre><code>-&gt; String other : Boolean\n</code></pre> Example<pre><code>str := \"Hello World!\";\n\n# prints true\nprint(str.startsWith(\"Hell\"));\n</code></pre>"},{"location":"Data-Types/string/#endswith","title":"<code>endsWith</code>","text":"<p>Check if the string is suffixed with <code>other</code>.</p> Signature<pre><code>-&gt; String other : Boolean\n</code></pre> Example<pre><code>str := \"Hello World!\";\n\n# prints true\nprint(str.endsWith(\"!\"));\n</code></pre>"},{"location":"Data-Types/string/#indexof","title":"<code>indexOf</code>","text":"<p>Position of <code>substring</code> in the string. Returns <code>-1</code> if not present.</p> Signature<pre><code>-&gt; String substring : Number\n</code></pre> Example<pre><code>str := \"Hello World!\";\n\n# prints 6\nprint(str.indexOf(\"W\"));\n</code></pre>"},{"location":"Data-Types/string/#substring","title":"<code>substring</code>","text":"<p>Returns a substring between <code>start</code> and <code>end</code>.</p> Signature<pre><code>-&gt; Number start, Number end : String\n</code></pre> Example<pre><code>str := \"Hello World!\";\n\n# prints \"World\"\nprint(str.substring(6, 11));\n</code></pre>"},{"location":"Data-Types/string/#replacefirst","title":"<code>replaceFirst</code>","text":"<p>Replaces first <code>substring</code> with <code>with</code>.</p> Signature<pre><code>-&gt; String pattern, String with : String\n</code></pre> Example<pre><code>str := \"Hello World!\";\n\n# prints \"Heelo World!\"\nprint(str.replaceFirst(\"l\", \"e\"));\n</code></pre>"},{"location":"Data-Types/string/#replaceall","title":"<code>replaceAll</code>","text":"<p>Replaces all <code>substring</code> with <code>with</code>.</p> Signature<pre><code>-&gt; String pattern, String with : String\n</code></pre> Example<pre><code>str := \"Hello World!\";\n\n# prints \"Heeeo World!\"\nprint(str.replaceAll(\"l\", \"e\"));\n</code></pre>"},{"location":"Data-Types/string/#replacefirstmapped","title":"<code>replaceFirstMapped</code>","text":"<p>Replaces first <code>substring</code> with value returned by <code>with</code>.</p> Signature<pre><code>-&gt; String pattern, (-&gt; String : String) mapper : String\n</code></pre> Example<pre><code>str := \"Hello World!\";\n\n# prints \"Heilo World!\"\nprint(str.replaceFirstMapped(\"l\", -&gt; _ : \"i\"));\n</code></pre>"},{"location":"Data-Types/string/#replaceallmapped","title":"<code>replaceAllMapped</code>","text":"<p>Replaces all <code>substring</code> with value returned by <code>with</code>.</p> Signature<pre><code>-&gt; String pattern, (-&gt; String : String) mapper : String\n</code></pre> Example<pre><code>str := \"Hello World!\";\n\n# prints \"Heiio World!\"\nprint(str.replaceAllMapped(\"l\", -&gt; _ : \"i\"));\n</code></pre>"},{"location":"Data-Types/string/#trim","title":"<code>trim</code>","text":"<p>Removes all whitespaces at the ends.</p> Signature<pre><code>-&gt; : String\n</code></pre> Example<pre><code>str := \"\\tHello World!   \";\n\n# prints \"Hello World!\"\nprint(str.trim());\n</code></pre>"},{"location":"Data-Types/string/#trimleft","title":"<code>trimLeft</code>","text":"<p>Removes all whitespaces at the start.</p> Signature<pre><code>-&gt; : String\n</code></pre> Example<pre><code>str := \"  Hello World!  \";\n\n# prints \"Hello World  \"\nprint(str.trimLeft());\n</code></pre>"},{"location":"Data-Types/string/#trimright","title":"<code>trimRight</code>","text":"<p>Removes all whitespaces at the end.</p> Signature<pre><code>-&gt; : String\n</code></pre> Example<pre><code>str := \"  Hello World!  \";\n\n# prints \"  Hello World\"\nprint(str.trimRight());\n</code></pre>"},{"location":"Data-Types/string/#padleft","title":"<code>padLeft</code>","text":"<p>Pads using <code>with</code> at the start.</p> Signature<pre><code>-&gt; Number length, String with : String\n</code></pre> Example<pre><code>str := \"1\";\n\n# prints 01\nprint(str.padLeft(2, \"0\"));\n</code></pre>"},{"location":"Data-Types/string/#padright","title":"<code>padRight</code>","text":"<p>Pads using <code>with</code> at the end.</p> Signature<pre><code>-&gt; Number length, String with : String\n</code></pre> Example<pre><code>str := \"1\";\n\n# prints 10\nprint(str.padRight(2, \"0\"));\n</code></pre>"},{"location":"Data-Types/string/#split","title":"<code>split</code>","text":"<p>Splits the string at <code>splitter</code>s.</p> Signature<pre><code>-&gt; String splitter : List&lt;String&gt;\n</code></pre> Example<pre><code>str := \"Hello!\";\n\n# prints [\"He\", \"o!\"]\nprint(str.split(\"ll\"));\n</code></pre>"},{"location":"Data-Types/string/#charat","title":"<code>charAt</code>","text":"<p>Returns character at <code>index</code>.</p> Signature<pre><code>-&gt; Number index : String\n</code></pre> Example<pre><code>str := \"Hello World!\";\n\n# prints \"e\"\nprint(str.charAt(1));\n</code></pre>"},{"location":"Data-Types/string/#codeunitat","title":"<code>codeUnitAt</code>","text":"<p>Returns code-unit at <code>index</code>.</p> Signature<pre><code>-&gt; Number index : String\n</code></pre> Example<pre><code>str := \"Hello World!\";\n\n# prints 101\nprint(str.codeUnitAt(1));\n</code></pre>"},{"location":"Data-Types/string/#tocodeunits","title":"<code>toCodeUnits</code>","text":"<p>Returns code-units of the string.</p> Signature<pre><code>-&gt; : List&lt;Number&gt;\n</code></pre> Example<pre><code>str := \"Hello!\";\n\n# prints [72, 101, 108, 108, 111, 33]\nprint(str.toCodeUnits());\n</code></pre>"},{"location":"Data-Types/string/#tolowercase","title":"<code>toLowerCase</code>","text":"<p>Returns the string in lowercase.</p> Signature<pre><code>-&gt; : String\n</code></pre> Example<pre><code>str := \"Hello World!\";\n\n# prints \"hello world!\"\nprint(str.toLowerCase());\n</code></pre>"},{"location":"Data-Types/string/#touppercase","title":"<code>toUpperCase</code>","text":"<p>Returns the string in uppercase.</p> Signature<pre><code>-&gt; : String\n</code></pre> Example<pre><code>str := \"Hello World!\";\n\n# prints \"HELLO WORLD!\"\nprint(str.toUpperCase());\n</code></pre>"},{"location":"Data-Types/string/#format","title":"<code>format</code>","text":"<p>Returns the formatted string. Example: <code>\"{} {1}\".format([\"Hello\", \"World\"])</code>, <code>\"{hello} {world}\".format({ hello: \"Hello\", world: \"World\" })</code> returns <code>Hello World</code></p> Signature<pre><code>-&gt; (Object | List&lt;Any&gt;) env : String\n</code></pre> Example<pre><code># prints \"Hello World!\"\nprint(\"{} {}!\".format([\"Hello\", \"World\"]));\n</code></pre>"},{"location":"Data-Types/unawaited/","title":"Unawaited","text":"<p>Represents a asynchronous function call that has not been <code>await</code>ed.</p> Example<pre><code>unawaitedValue := someAsyncFunction();\n\n# prints \"&lt;unawaited&gt;\"\nprint(typeof(unawaitedValue));\n\nresolvedValue := unawaitedValue.await;\n</code></pre>"},{"location":"Examples/area-of-shapes/","title":"Area of shapes","text":"<pre><code>square := {\n    area: -&gt; side : side * side,\n};\n\nrectangle := {\n    area: -&gt; length, breadth : length * breadth,\n};\n\nprint(\"Area of square: \" + square.area(5));\nprint(\"Area of rectangle: \" + rectangle.area(2, 3));\n</code></pre>"},{"location":"Examples/hello-world/","title":"Hello World!","text":"<pre><code>print(\"Hello World!\");\n</code></pre>"},{"location":"Examples/print-until-100/","title":"Print until 100 and as a list","text":"<pre><code>numbers := [];\nfor (i := 0; i &lt;= 100; i++) {\n    print(i);\n    numbers.add(i);\n}\nprint(numbers);\n</code></pre>"},{"location":"Native-APIs/boolean/","title":"Boolean","text":""},{"location":"Native-APIs/boolean/#booleanfrom","title":"<code>Boolean.from</code>","text":"<p>Takes in a value and returns the boolean equivalent.</p> Signature<pre><code>-&gt; Any : Boolean\n</code></pre> Example<pre><code># prints false\nprint(Boolean.from(0));\n\n# prints true\nprint(Boolean.from(1));\n\n# prints false\nprint(Boolean.from(null));\n</code></pre>"},{"location":"Native-APIs/convert/","title":"Convert","text":""},{"location":"Native-APIs/convert/#convertnewbyteslist","title":"<code>Convert.newBytesList</code>","text":"<p>Takes in an optional byte list and returns a <code>BytesList</code>.</p> Signature<pre><code>-&gt; [List&lt;Number&gt; bytes] : List&lt;Number&gt;\n</code></pre> Example<pre><code>bytesList1 := Convert.newBytesList();\nbytesList2 := Convert.newBytesList([0, 1, 2]);\n</code></pre>"},{"location":"Native-APIs/convert/#convertencodeascii","title":"<code>Convert.encodeAscii</code>","text":"<p>Takes in a string and returns a <code>BytesList</code>.</p> Signature<pre><code>-&gt; String : BytesList\n</code></pre> Example<pre><code># internally, [72, 101, 108, 108, 111]\nConvert.encodeAscii(\"Hello\");\n</code></pre>"},{"location":"Native-APIs/convert/#convertdecodeascii","title":"<code>Convert.decodeAscii</code>","text":"<p>Takes in a <code>BytesList</code> and returns a string.</p> Signature<pre><code>-&gt; BytesList : String\n</code></pre> Example<pre><code>bytesList := Convert.newBytesList([72, 101, 108, 108, 111]);\ndecoded := Convert.decodeAscii(bytesList);\n\n# prints \"Hello\"\nprint(decoded);\n</code></pre>"},{"location":"Native-APIs/convert/#convertencodebase64","title":"<code>Convert.encodeBase64</code>","text":"<p>Takes in a <code>BytesList</code> and returns a base64 string.</p> Signature<pre><code>-&gt; BytesList : String\n</code></pre> Example<pre><code>bytesList := Convert.newBytesList([72, 101, 108, 108, 111]);\nbase64 := Convert.encodeBase64(bytesList);\n\n# prints \"SGVsbG8=\"\nprint(base64);\n</code></pre>"},{"location":"Native-APIs/convert/#convertdecodebase64","title":"<code>Convert.decodeBase64</code>","text":"<p>Takes in a base64 string and returns a <code>BytesList</code>.</p> Signature<pre><code>-&gt; String : BytesList\n</code></pre> Example<pre><code># internally, [72, 101, 108, 108, 111]\nConvert.decodeBase64(\"SGVsbG8=\");\n</code></pre>"},{"location":"Native-APIs/convert/#convertencodelatin1","title":"<code>Convert.encodeLatin1</code>","text":"<p>Takes in a string and returns a <code>BytesList</code>.</p> Signature<pre><code>-&gt; String : BytesList\n</code></pre> Example<pre><code># internally, [72, 101, 108, 108, 111]\nConvert.encodeLatin1(\"Hello\");\n</code></pre>"},{"location":"Native-APIs/convert/#convertdecodelatin1","title":"<code>Convert.decodeLatin1</code>","text":"<p>Takes in a <code>BytesList</code> and returns a string.</p> Signature<pre><code>-&gt; BytesList : String\n</code></pre> Example<pre><code>bytesList := Convert.newBytesList([72, 101, 108, 108, 111]);\ndecoded := Convert.decodeLatin1(bytesList);\n\n# prints \"Hello\"\nprint(decoded);\n</code></pre>"},{"location":"Native-APIs/convert/#convertencodeutf8","title":"<code>Convert.encodeUtf8</code>","text":"<p>Takes in a string and returns a <code>BytesList</code>.</p> Signature<pre><code>-&gt; String : BytesList\n</code></pre> Example<pre><code># internally, [72, 101, 108, 108, 111]\nConvert.encodeUtf8(\"Hello\");\n</code></pre>"},{"location":"Native-APIs/convert/#convertdecodeutf8","title":"<code>Convert.decodeUtf8</code>","text":"<p>Takes in a <code>BytesList</code> and returns a string.</p> Signature<pre><code>-&gt; BytesList : String\n</code></pre> Example<pre><code>bytesList := Convert.newBytesList([72, 101, 108, 108, 111]);\ndecoded := Convert.decodeUtf8(bytes);\n\n# prints \"Hello\"\nprint(decoded);\n</code></pre>"},{"location":"Native-APIs/convert/#convertencodejson","title":"<code>Convert.encodeJson</code>","text":"<p>Takes in a value and returns json string.</p> Signature<pre><code>-&gt; Any : String\n</code></pre> Example<pre><code>json := {\n    hello: \"world\",\n};\nencoded := Convert.encodeJson(json);\n\n# prints `{\"hello\":\"world\"}`\nprint(encoded);\n</code></pre>"},{"location":"Native-APIs/convert/#convertdecodejson","title":"<code>Convert.decodeJson</code>","text":"<p>Takes in a json string and returns a value.</p> Signature<pre><code>-&gt; String : Any\n</code></pre> Example<pre><code>json := '{\"hello\":\"world\"}';\ndecoded := Convert.decodeJson(json);\n\n# prints { hello: \"world\" }\nprint(decoded);\n</code></pre>"},{"location":"Native-APIs/convert/#byteslist-private","title":"<code>BytesList</code> (Private)","text":"<p>An internally represented bytes list.</p>"},{"location":"Native-APIs/convert/#bytes","title":"<code>bytes</code>","text":"<p>Returns the bytes as a list.</p> Signature<pre><code>-&gt; : List&lt;Number&gt;\n</code></pre> Example<pre><code>bytesList := Convert.newBytesList([0, 1, 2]);\n\n# prints [0, 1, 2]\nprint(bytesList.bytes());\n</code></pre>"},{"location":"Native-APIs/datetime/","title":"DateTime","text":""},{"location":"Native-APIs/datetime/#datetimefrommillisecondssinceepoch","title":"<code>DateTime.fromMillisecondsSinceEpoch</code>","text":"<p>Takes in an number (milliseconds since epoch) and returns a <code>DateTimeInst</code>.</p> Signature<pre><code>-&gt; Number millisecondsSinceEpoch : DateTimeInst\n</code></pre> Example<pre><code>ms := 1330329420000;\ntime := DateTime.fromMillisecondsSinceEpoch(ms);\n\n# prints \"2012-02-27T13:27:00.000\"\nprint(time.iso);\n</code></pre>"},{"location":"Native-APIs/datetime/#datetimeparse","title":"<code>DateTime.parse</code>","text":"<p>Takes in a ISO string, date string, time string or any parsable date-time value and returns a <code>DateTimeInst</code>.</p> <p>Examples of accepted strings:</p> <ul> <li><code>2012-02-27</code></li> <li><code>2012-02-27 13:27:00</code></li> <li><code>2012-02-27 13:27:00.123456789z</code></li> <li><code>2012-02-27 13:27:00,123456789z</code></li> <li><code>20120227 13:27:00</code></li> <li><code>20120227T132700</code></li> <li><code>20120227</code></li> <li><code>+20120227</code></li> <li><code>2012-02-27T14Z</code></li> <li><code>2012-02-27T14+00:00</code></li> <li><code>-123450101 00:00:00 Z\": in the year -12345</code></li> <li><code>2002-02-27T14:00:00-0500\": Same as \"2002-02-27T19:00:00Z</code></li> </ul> Signature<pre><code>-&gt; String millisecondsSinceEpoch : DateTimeInst\n</code></pre> Example<pre><code>time := DateTime.parse(\"2012-02-27 13:27:00\");\n\n# prints \"2012-02-27T13:27:00.000\"\nprint(time.iso);\n</code></pre>"},{"location":"Native-APIs/datetime/#datetimenow","title":"<code>DateTime.now</code>","text":"<p>Returns a <code>DateTimeInst</code> of current time.</p> Signature<pre><code>-&gt; : DateTimeInst\n</code></pre> Example<pre><code>time := DateTime.now();\n\n# prints \"2012-02-27T13:27:00.000\"\nprint(time.iso);\n</code></pre>"},{"location":"Native-APIs/datetime/#datetimeinst-private","title":"<code>DateTimeInst</code> (Private)","text":"<p>Contains information about the time.</p>"},{"location":"Native-APIs/datetime/#day","title":"<code>day</code>","text":"<p>Date of the month. <code>[1..31]</code></p> Signature<pre><code>Number\n</code></pre> Example<pre><code>now := DateTime.parse(\"2012-02-27 13:27:00\");\n\n# prints 27\nprint(now.day);\n</code></pre>"},{"location":"Native-APIs/datetime/#weekday","title":"<code>weekday</code>","text":"<p>Day of the week. <code>[1..7]</code> (<code>1</code> - Monday, ..., <code>7</code> - Sunday)</p> Signature<pre><code>Number\n</code></pre> Example<pre><code>now := DateTime.parse(\"2012-02-27 13:27:00\");\n\n# prints 1\nprint(now.weekday);\n</code></pre>"},{"location":"Native-APIs/datetime/#month","title":"<code>month</code>","text":"<p>Month of the year. <code>[1..12]</code></p> Signature<pre><code>Number\n</code></pre> Example<pre><code>now := DateTime.parse(\"2012-02-27 13:27:00\");\n\n# prints 2\nprint(now.month);\n</code></pre>"},{"location":"Native-APIs/datetime/#year","title":"<code>year</code>","text":"<p>Year.</p> Signature<pre><code>Number\n</code></pre> Example<pre><code>now := DateTime.parse(\"2012-02-27 13:27:00\");\n\n# prints 2012\nprint(now.year);\n</code></pre>"},{"location":"Native-APIs/datetime/#hour","title":"<code>hour</code>","text":"<p>Hour of the day. <code>[0..23]</code></p> Signature<pre><code>Number\n</code></pre> Example<pre><code>now := DateTime.parse(\"2012-02-27 13:27:00\");\n\n# prints 13\nprint(now.hour);\n</code></pre>"},{"location":"Native-APIs/datetime/#minute","title":"<code>minute</code>","text":"<p>Minute of the hour. <code>[0..59]</code></p> Signature<pre><code>Number\n</code></pre> Example<pre><code>now := DateTime.parse(\"2012-02-27 13:27:00\");\n\n# prints 27\nprint(now.minute);\n</code></pre>"},{"location":"Native-APIs/datetime/#second","title":"<code>second</code>","text":"<p>Second of the minute. <code>[0..59]</code></p> Signature<pre><code>Number\n</code></pre> Example<pre><code>now := DateTime.parse(\"2012-02-27 13:27:01\");\n\n# prints 1\nprint(now.second);\n</code></pre>"},{"location":"Native-APIs/datetime/#millisecond","title":"<code>millisecond</code>","text":"<p>Milliseconds of the second. <code>[0..999]</code></p> Signature<pre><code>Number\n</code></pre> Example<pre><code>now := DateTime.parse(\"2012-02-27 13:27:00.12345\");\n\n# prints 12345\nprint(now.millisecond);\n</code></pre>"},{"location":"Native-APIs/datetime/#millisecondssinceepoch","title":"<code>millisecondsSinceEpoch</code>","text":"<p>Number of milliseconds since the Unix Epoch.</p> Signature<pre><code>Number\n</code></pre> Example<pre><code>now := DateTime.parse(\"2012-02-27 13:27:00\");\n\n# prints 1330329420000\nprint(now.millisecondsSinceEpoch);\n</code></pre>"},{"location":"Native-APIs/datetime/#timezonename","title":"<code>timeZoneName</code>","text":"<p>Name of the time zone.</p> Signature<pre><code>String\n</code></pre> Example<pre><code>now := DateTime.parse(\"2012-02-27 13:27:00\");\n\n# prints \"Pacific Standard Time\"\nprint(now.timeZoneName);\n</code></pre>"},{"location":"Native-APIs/datetime/#timezoneoffset","title":"<code>timeZoneOffset</code>","text":"<p>Difference between local time and UTC in milliseconds.</p> Signature<pre><code>Number\n</code></pre> Example<pre><code>now := DateTime.parse(\"2012-02-27 13:27:00\");\n\n# prints 60000\nprint(now.timeZoneOffset);\n</code></pre>"},{"location":"Native-APIs/datetime/#iso","title":"<code>iso</code>","text":"<p>ISO-8601 full-precision extended format representation.</p> Signature<pre><code>String\n</code></pre> Example<pre><code>now := DateTime.parse(\"2012-02-27 13:27:00\");\n\n# prints \"2012-02-27T13:27:00.000\"\nprint(now.iso);\n</code></pre>"},{"location":"Native-APIs/exception/","title":"Exception","text":""},{"location":"Native-APIs/exception/#exceptionnew","title":"<code>Exception.new</code>","text":"<p>Takes in a message, optional stack trace and returns a <code>ExceptionInst</code>.</p> <pre><code>exception1 := Exception.new(\"Something went wrong!\");\nexception2 := Exception.new(\"Something went wrong!\", \"at line 1\");\n\n# prints:\n#   Exception: Something went wrong!\n#   Stack Trace:\n#   ...\nprint(exception1);\n\n# prints:\n#   Exception: Something went wrong!\n#   Stack Trace:\n#   at line 1\nprint(exception2);\n</code></pre>"},{"location":"Native-APIs/exception/#exceptioninst-private","title":"<code>ExceptionInst</code> (Private)","text":"<p>Contains information about an exception.</p>"},{"location":"Native-APIs/exception/#message","title":"<code>message</code>","text":"<p>Message of the exception.</p> Signature<pre><code>String\n</code></pre> Example<pre><code>exception := Exception.new(\"Something went wrong!\");\n\n# prints \"Something went wrong!\"\nprint(exception.message);\n</code></pre>"},{"location":"Native-APIs/exception/#stacktrace","title":"<code>stackTrace</code>","text":"<p>Stack trace of the exception.</p> Signature<pre><code>String\n</code></pre> Example<pre><code>exception := Exception.new(\"Something went wrong!\", \"at line 1\");\n\n# prints \"at line 1\"\nprint(exception.stackTrace);\n</code></pre>"},{"location":"Native-APIs/fiber/","title":"Fiber","text":"<p>Fiber allows concurrent execution of code.</p>"},{"location":"Native-APIs/fiber/#fiberwait","title":"<code>Fiber.wait</code>","text":"<p>Takes in duration in milliseconds and returns a future that resolved after the duration.</p> Signature<pre><code>-&gt; Number ms : Unawaited&lt;Null&gt;\n</code></pre> Example<pre><code># before 1 second\nFuture.wait(1000).await;\n# after 1 second\n</code></pre>"},{"location":"Native-APIs/fiber/#fiberrunconcurrently","title":"<code>Fiber.runConcurrently</code>","text":"<p>Takes in a list of functions that returns the list of values returned.</p> Signature<pre><code>-&gt; List&lt;Any&gt; functions : Unawaited&lt;List&lt;Any&gt;&gt;\n</code></pre> Example<pre><code>results := Fiber.runConcurrently([\n    -&gt; : {\n        Fiver.wait(1000);\n        return \"Hello\";\n    },\n    -&gt; : {\n        Fiver.wait(3000);\n        return \"World\";\n    },\n    -&gt; : {\n        Fiver.wait(2000);\n        return \"!\";\n    },\n]).await;\n\n# this takes only around 3-4 seconds\n# prints [\"Hello\", \"World\", \"!\"]\nprint(results);\n</code></pre>"},{"location":"Native-APIs/function/","title":"Function","text":""},{"location":"Native-APIs/function/#functioncall","title":"<code>Function.call</code>","text":"<p>Takes in an function, list of arguments and returns the result of the function after calling.</p> Signature<pre><code>-&gt; List&lt;Any&gt; params : Any\n</code></pre> Example<pre><code>printString := -&gt; value {\n    print(value);\n};\n\n# prints \"Hello World!\"\nFunction.call(printHello, [\"Hello World!\"]);\n</code></pre>"},{"location":"Native-APIs/globals/","title":"Globals","text":""},{"location":"Native-APIs/globals/#typeof","title":"<code>typeof</code>","text":"<p>Takes in a value and returns the type. The type will be any one of <code>Boolean</code>, <code>Function</code>, <code>NativeFunction</code>, <code>AsyncNativeFunction</code>, <code>Null</code>, <code>Number</code>, <code>String</code>, <code>Object</code>, <code>List</code> or <code>Future</code>.</p> Signature<pre><code>-&gt; Any value : String\n</code></pre> Example<pre><code># prints \"Number\"\nprint(typeof(10));\n\n# prints \"String\"\nprint(typeof(\"Hello\"));\n</code></pre>"},{"location":"Native-APIs/list/","title":"List","text":""},{"location":"Native-APIs/list/#listfrom","title":"<code>List.from</code>","text":"<p>Takes in a value and returns a list. If the value is a list, the list is cloned. If the value is a map, the entries are returned. An exception is thrown if it is neither of these.</p> Signature<pre><code>-&gt; (Object | List&lt;Any&gt;) value : List&lt;Any&gt;\n</code></pre> Example<pre><code>list1 := List.from([0, 1, 2]);\nlist2 := List.from({ hello: \"world\" });\n\n# prints [0, 1, 2]\nprint(list1);\n\n# prints [[\"hello\", \"world\"]]\nprint(list2);\n</code></pre>"},{"location":"Native-APIs/list/#listgenerate","title":"<code>List.generate</code>","text":"<p>Takes in a length, a predicate that returns a value and returns the generated list.</p> Signature<pre><code>-&gt; Number length : String\n</code></pre> Example<pre><code>list := List.from(3, -&gt; i : i + 1);\n\n# prints [1, 2, 3]\nprint(list);\n</code></pre>"},{"location":"Native-APIs/list/#listfilled","title":"<code>List.filled</code>","text":"<p>Takes in a length, a value and returns the list.</p> Signature<pre><code>-&gt; Any value : String\n</code></pre> Example<pre><code>list := List.from(3, 10);\n\n# prints [10, 10, 10]\nprint(list);\n</code></pre>"},{"location":"Native-APIs/number/","title":"Number","text":""},{"location":"Native-APIs/number/#numberinfinity","title":"<code>Number.infinity</code>","text":"<p>Returns infinity.</p> Signature<pre><code>Number\n</code></pre> Example<pre><code># prints Infinity\nprint(Number.infinity);\n</code></pre>"},{"location":"Native-APIs/number/#numbernegativeinfinity","title":"<code>Number.negativeInfinity</code>","text":"<p>Returns negative infinity.</p> Signature<pre><code>Number\n</code></pre> Example<pre><code># prints -Infinity\nprint(Number.negativeInfinity);\n</code></pre>"},{"location":"Native-APIs/number/#numbernan","title":"<code>Number.NaN</code>","text":"<p>Returns <code>NaN</code>.</p> Signature<pre><code>Number\n</code></pre> Example<pre><code># prints NaN\nprint(Number.NaN);\n</code></pre>"},{"location":"Native-APIs/number/#numbermaxfinite","title":"<code>Number.maxFinite</code>","text":"<p>Returns the maximum value of number.</p> Signature<pre><code>Number\n</code></pre> Example<pre><code># prints 1.7976931348623157e+308\nprint(Number.maxFinite);\n</code></pre>"},{"location":"Native-APIs/number/#numberfrom","title":"<code>Number.from</code>","text":"<p>Takes in a value and returns a number.</p> Signature<pre><code>-&gt; Any value : Number\n</code></pre> Example<pre><code># prints 10\nprint(Number.from(\"10\"));\n</code></pre>"},{"location":"Native-APIs/number/#numberfromornull","title":"<code>Number.fromOrNull</code>","text":"<p>Takes in a value and returns a number or <code>null</code>.</p> Signature<pre><code>-&gt; Any value : (Number | Null)\n</code></pre> Example<pre><code># prints 10\nprint(Number.from(\"10\"));\n\n# prints null\nprint(Number.from([]));\n</code></pre>"},{"location":"Native-APIs/number/#numberfromradix","title":"<code>Number.fromRadix</code>","text":"<p>Takes in a value and returns a number.</p> Signature<pre><code>-&gt; String value, Number radix : Number\n</code></pre> Example<pre><code># prints 55\nprint(Number.fromRadix(\"110111\", 2));\n\n# prints 15\nprint(Number.fromRadix(\"17\", 8));\n</code></pre>"},{"location":"Native-APIs/number/#numberfromradixornull","title":"<code>Number.fromRadixOrNull</code>","text":"<p>Takes in a value and returns a number or <code>null</code>.</p> Signature<pre><code>-&gt; String value, Number radix : (Number | Null)\n</code></pre> Example<pre><code># prints 55\nprint(Number.fromRadixOrNull(\"110111\"));\n\n# prints null\nprint(Number.fromRadixOrNull([]));\n</code></pre>"},{"location":"Native-APIs/object/","title":"Object","text":""},{"location":"Native-APIs/object/#objectfrom","title":"<code>Object.from</code>","text":"<p>Takes in an object and returns the clone of it.</p> Signature<pre><code>-&gt; Object value : Object\n</code></pre> Example<pre><code>obj := { hello: \"world\" };\ncloned := Object.from(obj);\n\n# prints { hello: \"world\" }\nprints cloned;\n</code></pre>"},{"location":"Native-APIs/object/#objectfromentries","title":"<code>Object.fromEntries</code>","text":"<p>Takes in an list of entries and returns an object.</p> Signature<pre><code>-&gt; List&lt;List&lt;Any, Any&gt;&gt; entries : Object\n</code></pre> Example<pre><code>entries := [[\"hello\", \"world\"]];\nobj := Object.fromEntries(entries);\n\n# prints { hello: \"world\" }\nprints obj;\n</code></pre>"},{"location":"Native-APIs/object/#objectapply","title":"<code>Object.apply</code>","text":"<p>Takes in two objects and returns object A after applying properties of object B to object A.</p> Signature<pre><code>-&gt; Object a, Object b : Object\n</code></pre> Example<pre><code>a := {};\nb := {\n    hello: \"world\",\n};\nObject.apply(a, b);\n\n# prints { hello: \"world\" }\nprint(a);\n</code></pre>"},{"location":"Native-APIs/object/#objectentries","title":"<code>Object.entries</code>","text":"<p>Takes in an object and returns a list of key-value pairs in a list.</p> Signature<pre><code>-&gt; Object obj : List&lt;List&lt;Any, Any&gt;&gt;\n</code></pre> Example<pre><code>obj := {\n    hello: \"world\",\n    foo: \"bar\",\n};\nentries := Object.entries(obj);\n\n# prints [[\"hello\", \"world\"], [\"foo\", \"bar\"]]\nprint(entries);\n</code></pre>"},{"location":"Native-APIs/object/#objectkeys","title":"<code>Object.keys</code>","text":"<p>Takes in an object and returns a list of keys.</p> Signature<pre><code>-&gt; Object obj : List&lt;Any&gt;\n</code></pre> Example<pre><code>obj := {\n    hello: \"world\",\n    foo: \"bar\",\n};\nkeys := Object.keys(obj);\n\n# prints [\"hello\", \"foo\"]\nprint(keys);\n</code></pre>"},{"location":"Native-APIs/object/#objectvalues","title":"<code>Object.values</code>","text":"<p>Takes in an object and returns a list of values.</p> Signature<pre><code>-&gt; Object obj : List&lt;Any&gt;\n</code></pre> Example<pre><code>obj := {\n    hello: \"world\",\n    foo: \"bar\",\n};\nvalues := Object.values(obj);\n\n# prints [\"hello\", \"foo\"]\nprint(values);\n</code></pre>"},{"location":"Native-APIs/object/#objectclone","title":"<code>Object.clone</code>","text":"<p>Takes in an object and returns a clone of it.</p> Signature<pre><code>-&gt; Object obj : Object\n</code></pre> Example<pre><code>obj := { hello: \"world\" };\ncloned := Object.clone();\n\n# prints { hello: \"world\" }\nprint(cloned);\n</code></pre>"},{"location":"Native-APIs/object/#objectdeleteproperty","title":"<code>Object.deleteProperty</code>","text":"<p>Takes in an object, a key and removes the key from the object.</p> Signature<pre><code>-&gt; Object obj, Any key : Object\n</code></pre> Example<pre><code>obj := {\n    hello: \"world\",\n    foo: \"bar\",\n};\nObject.deleteProperty(obj, \"hello\");\n\n# prints { foo: \"bar\" }\nprint(obj);\n</code></pre>"},{"location":"Native-APIs/regex/","title":"RegExp","text":""},{"location":"Native-APIs/regex/#regexpnew","title":"<code>RegExp.new</code>","text":"<p>Takes in a regular expression, optional flags and returns <code>RegExpInst</code>.</p> Signature<pre><code>-&gt; String regex, (String | Null) flags : RegExpInst\n</code></pre> Example<pre><code>regex1 := RegExp.new(r\"\\w+\");\nregex2 := RegExp.new(\"\\\\d+\");\n\n# prints \"\\\\w+\"\nprint(regex1.pattern);\n\n# prints \"\\\\d+\"\nprint(regex2.pattern);\n</code></pre>"},{"location":"Native-APIs/regex/#regexpinst-private","title":"<code>RegExpInst</code> (Private)","text":"<p>The regular expression.</p>"},{"location":"Native-APIs/regex/#iscaseinsensitive","title":"<code>isCaseInsensitive</code>","text":"<p>Is case insensitive flag enabled?</p> Signature<pre><code>Boolean\n</code></pre> Example<pre><code>regex := RegExp.new(r\"\\w+\", \"i\");\n\n# prints true\nprint(regex.isCaseInsensitive);\n</code></pre>"},{"location":"Native-APIs/regex/#isdotall","title":"<code>isDotAll</code>","text":"<p>Is dot-all flag enabled?</p> Signature<pre><code>Boolean\n</code></pre> Example<pre><code>regex := RegExp.new(r\"\\w+\", \"s\");\n\n# prints true\nprint(regex.isDotAll);\n</code></pre>"},{"location":"Native-APIs/regex/#ismultiline","title":"<code>isMultiline</code>","text":"<p>Is multiline flag enabled?</p> Signature<pre><code>Boolean\n</code></pre> Example<pre><code>regex := RegExp.new(r\"\\w+\", \"m\");\n\n# prints true\nprint(regex.isMultiline);\n</code></pre>"},{"location":"Native-APIs/regex/#isunicode","title":"<code>isUnicode</code>","text":"<p>Is unicode flag enabled?</p> Signature<pre><code>Boolean\n</code></pre> Example<pre><code>regex := RegExp.new(r\"\\w+\", \"u\");\n\n# prints true\nprint(regex.isUnicode);\n</code></pre>"},{"location":"Native-APIs/regex/#pattern","title":"<code>pattern</code>","text":"<p>Regular expression pattern.</p> Signature<pre><code>String\n</code></pre> Example<pre><code>regex := RegExp.new(r\"\\w+\");\n\n# prints \"\\\\w+\"\nprint(regex.pattern);\n</code></pre>"},{"location":"Native-APIs/regex/#hasmatch","title":"<code>hasMatch</code>","text":"<p>Does <code>input</code> has matches against the pattern.</p> Signature<pre><code>-&gt; String input : Boolean\n</code></pre> Example<pre><code>regex := RegExp.new(r\"\\w+\");\n\n# prints true\nprint(regex.hasMatch(\"Hello\"));\n</code></pre>"},{"location":"Native-APIs/regex/#stringmatch","title":"<code>stringMatch</code>","text":"<p>Returns the string match of <code>input</code> against the pattern.</p> Signature<pre><code>-&gt; String input : (String | Null)\n</code></pre> Example<pre><code>regex := RegExp.new(r\"\\w+\");\n\n# prints \"Hello\"\nprint(regex.stringMatch(\"Hello\"));\n</code></pre>"},{"location":"Native-APIs/regex/#firstmatch","title":"<code>firstMatch</code>","text":"<p>Returns the match of <code>input</code> against the pattern.</p> Signature<pre><code>-&gt; String input : (RegExpMatch | Null)\n</code></pre> Example<pre><code>regex := RegExp.new(r\"(\\d+)\");\n\n# prints \"1\"\nprint(regex.firstMatch(\"1 2 3\").group(1));\n</code></pre>"},{"location":"Native-APIs/regex/#allmatches","title":"<code>allMatches</code>","text":"<p>Returns the all the matches of <code>input</code> against the pattern.</p> Signature<pre><code>-&gt; String input : List&lt;RegExpMatch&gt;\n</code></pre> Example<pre><code>regex := RegExp.new(r\"(\\d+)\");\nmatches := regex.allMatches(\"1 2 3\");\n\n# prints,\n#   \"1\"\n#   \"2\"\n#   \"3\"\nmatches.forEach(-&gt; x : print(x.group(1)));\n</code></pre>"},{"location":"Native-APIs/regex/#replacefirst","title":"<code>replaceFirst</code>","text":"<p>Returns a string after replacing first match of <code>input</code> against the pattern using <code>with</code>.</p> Signature<pre><code>-&gt; String input, String with : String\n</code></pre> Example<pre><code>regex := RegExp.new(r\"\\.md$\");\n\n# prints \"index.html\"\nprint(regex.replaceFirst(\"index.md\", \".html\"));\n</code></pre>"},{"location":"Native-APIs/regex/#replaceall","title":"<code>replaceAll</code>","text":"<p>Returns a string after replacing all the matches of <code>input</code> against the pattern using <code>with</code>.</p> Signature<pre><code>-&gt; String input, String with : String\n</code></pre> Example<pre><code>regex := RegExp.new(r\"\\.md\");\n\n# prints \"index.html, hello.html\"\nprint(regex.replaceAll(\"index.md, hello.md\", \".html\"));\n</code></pre>"},{"location":"Native-APIs/regex/#replacefirstmapped","title":"<code>replaceFirstMapped</code>","text":"<p>Returns a string after replacing first match of <code>input</code> against the pattern using the value returned by <code>with</code>.</p> Signature<pre><code>-&gt; String input, (-&gt; RegExpMatch : String) with : String\n</code></pre> Example<pre><code>regex := RegExp.new(r\"[A-Z]+\");\n\n# prints \"hello worLD\"\nprint(regex.replaceFirstMapped(\"HELLo worLD\", -&gt; match : match.group(0).toLowerCase()));\n</code></pre>"},{"location":"Native-APIs/regex/#replaceallmapped","title":"<code>replaceAllMapped</code>","text":"<p>Returns a string after replacing all the matches of <code>input</code> against the pattern using the value returned by <code>with</code>.</p> Signature<pre><code>-&gt; String input, (-&gt; RegExpMatch : String) with : String\n</code></pre> Example<pre><code>regex := RegExp.new(r\"[A-Z]+\");\n\n# prints \"hello world\"\nprint(regex.replaceAllMapped(\"HELLo worLD\", -&gt; match : match.group(0).toLowerCase()));\n</code></pre>"},{"location":"Native-APIs/regex/#regexpmatch-private","title":"<code>RegExpMatch</code> (Private)","text":"<p>Contains information about a regular expression match.</p>"},{"location":"Native-APIs/regex/#input","title":"<code>input</code>","text":"<p>The input.</p> Signature<pre><code>String\n</code></pre> Example<pre><code>regex := RegExp.new(r\"(\\d+)\");\nmatch := regex.firstMatch(\"1 2 3\");\n\n# prints \"1 2 3\"\nprint(match.input);\n</code></pre>"},{"location":"Native-APIs/regex/#groupcount","title":"<code>groupCount</code>","text":"<p>The number of groups.</p> Signature<pre><code>Number\n</code></pre> Example<pre><code>regex := RegExp.new(r\"(\\d+)\");\nmatch := regex.firstMatch(\"1 2 3\");\n\n# prints 1\nprint(match.groupCount);\n</code></pre>"},{"location":"Native-APIs/regex/#groupnames","title":"<code>groupNames</code>","text":"<p>The names of the groups.</p> Signature<pre><code>List&lt;String&gt;\n</code></pre> Example<pre><code>regex := RegExp.new(r\"(?&lt;digit&gt;\\d+)\");\nmatch := regex.firstMatch(\"1 2 3\");\n\n# prints [\"digit\"]\nprint(match.groupNames);\n</code></pre>"},{"location":"Native-APIs/regex/#namedgroup","title":"<code>namedGroup</code>","text":"<p>Returns the match using the <code>groupName</code>.</p> Signature<pre><code>-&gt; String groupName : (RegExpMatch | Null)\n</code></pre> Example<pre><code>regex := RegExp.new(r\"(?&lt;digit&gt;\\d+)\");\nmatch := regex.firstMatch(\"1 2 3\");\n\n# prints \"1\"\nprint(match.namedGroup(\"digit\"));\n</code></pre>"},{"location":"Native-APIs/regex/#group","title":"<code>group</code>","text":"<p>Returns the match at the <code>index</code>.</p> Signature<pre><code>-&gt; Number index : (RegExpMatch | Null)\n</code></pre> Example<pre><code>regex := RegExp.new(r\"(\\d+)\");\nmatch := regex.firstMatch(\"1 2 3\");\n\n# prints \"1\"\nprint(match.group(1));\n</code></pre>"},{"location":"Native-APIs/string/","title":"String","text":""},{"location":"Native-APIs/string/#stringfrom","title":"<code>String.from</code>","text":"<p>Takes in a value and returns a string.</p> Signature<pre><code>-&gt; Any value : String\n</code></pre> Example<pre><code># prints \"false\"\nprint(String.from(false));\n\n# prints \"1\"\nprint(String.from(1));\n\n# prints \"[1, 2, 3]\"\nprint(String.from([1, 2, 3]));\n</code></pre>"},{"location":"Native-APIs/string/#stringfromcodeunit","title":"<code>String.fromCodeUnit</code>","text":"<p>Takes in a byte and returns the equivalent character value as string.</p> Signature<pre><code>-&gt; Number codeUnit : String\n</code></pre> Example<pre><code># prints \"H\"\nprint(String.fromCodeUnit(72));\n</code></pre>"},{"location":"Native-APIs/string/#stringfromcodeunits","title":"<code>String.fromCodeUnits</code>","text":"<p>Takes in a byte and returns the equivalent character value as string.</p> Signature<pre><code>-&gt; List&lt;Number&gt; codeUnits : String\n</code></pre> Example<pre><code># prints \"Hello\"\nprint(String.fromCodeUnit([72, 101, 108, 108, 111]));\n</code></pre>"},{"location":"Operators/","title":"Precedence Table","text":"Name Operator Precedence Default - 0 Declaration <code>\u2026 := \u2026</code> 1 Assignment <code>\u2026 = \u2026</code> 1 Addition Assignment <code>\u2026 += \u2026</code> 1 Subtraction Assignment <code>\u2026 -= \u2026</code> 1 Multiplication Assignment <code>\u2026 *= \u2026</code> 1 Division Assignment <code>\u2026 /= \u2026</code> 1 Floor Division Assignment <code>\u2026 //= \u2026</code> 1 Remainder Assignment <code>\u2026 %= \u2026</code> 1 Exponent Assignment <code>\u2026 **= \u2026</code> 1 Logial AND Assignment <code>\u2026 &amp;&amp;= \u2026</code> 1 Logial OR Assignment <code>\u2026 ||= \u2026</code> 1 Bitwise AND Assignment <code>\u2026 &amp;= \u2026</code> 1 Bitwise OR Assignment <code>\u2026 |= \u2026</code> 1 Bitwise XOR Assignment <code>\u2026 ^= \u2026</code> 1 Nullable Assignment <code>\u2026 ??= \u2026</code> 1 Ternary <code>\u2026 ? \u2026 : \u2026</code> 1 Logical OR <code>\u2026 || \u2026</code> 2 Nullable OR <code>\u2026 ?? \u2026</code> 2 Logical AND <code>\u2026 &amp;&amp; \u2026</code> 3 Bitwise OR <code>\u2026 | \u2026</code> 4 Bitwise XOR <code>\u2026 ^ \u2026</code> 5 Bitwise AND <code>\u2026 &amp; \u2026</code> 6 Equality <code>\u2026 == \u2026</code> 7 Inequality <code>\u2026 != \u2026</code> 7 Lesser Than <code>\u2026 &lt; \u2026</code> 8 Lesser Than Or Equal <code>\u2026 &lt;= \u2026</code> 8 Greater Than <code>\u2026 &gt; \u2026</code> 8 Greater Than Or Equal <code>\u2026 &gt;= \u2026</code> 8 Addition <code>\u2026 + \u2026</code> 9 Subtraction <code>\u2026 - \u2026</code> 9 Multiplication <code>\u2026 * \u2026</code> 10 Division <code>\u2026 / \u2026</code> 10 Floor Division <code>\u2026 // \u2026</code> 10 Remainder <code>\u2026 % \u2026</code> 10 Exponent <code>\u2026 ** \u2026</code> 11 Logical NOT <code>! \u2026</code> 12 Bitwise NOT <code>~ \u2026</code> 12 Unary Plus <code>+ \u2026</code> 12 Unary Negation <code>- \u2026</code> 12 Call <code>\u2026 ()</code> 13 Member Access <code>\u2026 . \u2026</code> 13 Computed Member Access <code>\u2026 [ \u2026 ]</code> 13 Nullable Access <code>\u2026 ?. \u2026</code> 13 Await <code>\u2026 .await</code> 13 Grouping <code>( \u2026 )</code> 14"},{"location":"Operators/addition-assignment/","title":"Addition Assignment","text":"<p>Addition assignment operator (<code>+=</code>) can be used add and assign value to a variable.</p> Syntax<pre><code>variable += expr\n</code></pre> Example<pre><code>a += 3\nb += 4\n</code></pre>"},{"location":"Operators/addition/","title":"Addition","text":"<p>Addition operator (<code>=</code>) can be used to add two numbers or concate two strings.</p> Syntax<pre><code>operand1 + operand2\n</code></pre> Example<pre><code>3 + 2\n# 5\n\n\"Hello\" + \" World\"\n# Hello World\n\n\"Hello \" + 1\n# Hello1\n</code></pre>"},{"location":"Operators/assignment/","title":"Assignment","text":"<p>Assignment operator (<code>=</code>) can be used to set a new value to a variable.</p> Syntax<pre><code>variable = expr\n</code></pre> Example<pre><code>a = 3\nb = 4\n</code></pre>"},{"location":"Operators/await/","title":"Await","text":"<p>Await operator (<code>.await</code>) can be used to execute <code>unawaited</code> values.</p> Syntax<pre><code>unawaited.await\n</code></pre> Example<pre><code>someUnawaitedValue.await\n</code></pre>"},{"location":"Operators/bitwise-and-assignment/","title":"Bitwise AND Assignment","text":"<p>Bitwise AND assignment operator (<code>&amp;=</code>) can be used to perform bitwise AND operation and assign it to a variable.</p> Syntax<pre><code>variable &amp;= expr\n</code></pre> Example<pre><code>a &amp;= 0\nb &amp;= 1\n</code></pre>"},{"location":"Operators/bitwise-and/","title":"Bitwise AND","text":"<p>Bitwise AND operator (<code>&amp;</code>) can be used to perform binary AND operation on two numbers.</p> Syntax<pre><code>operand1 &amp; operand2\n</code></pre> Example<pre><code>a &amp; b\n\n1 &amp; 1\n# 1\n\n2 &amp; 4\n# 0\n\n4 &amp; 4\n# 4\n</code></pre>"},{"location":"Operators/bitwise-not/","title":"Bitwise NOT","text":"<p>Bitwise NOT operator (<code>~</code>) can be used to perform binary NOT operation on numbers.</p> Syntax<pre><code>~operand1\n</code></pre> Example<pre><code>~2\n~someNumberValue\n</code></pre>"},{"location":"Operators/bitwise-or-assignment/","title":"Bitwise OR Assignment","text":"<p>Bitwise OR assignment operator (<code>|=</code>) can be used to perform bitwise OR operation and assign it to a variable.</p> Syntax<pre><code>variable |= expr\n</code></pre> Example<pre><code>a |= 0\nb |= 1\n</code></pre>"},{"location":"Operators/bitwise-or/","title":"Bitwise OR","text":"<p>Bitwise OR operator (<code>|</code>) can be used to perform binary OR operation on two numbers.</p> Syntax<pre><code>operand1 | operand2\n</code></pre> Example<pre><code>a | b\n\n1 | 1\n# 1\n\n2 | 4\n# 6\n</code></pre>"},{"location":"Operators/bitwise-xor-assignment/","title":"Bitwise XOR Assignment","text":"<p>Bitwise XOR assignment operator (<code>^=</code>) can be used to perform bitwise XOR operation and assign it to a variable.</p> Syntax<pre><code>variable ^= expr\n</code></pre> Example<pre><code>a ^= 0\nb ^= 1\n</code></pre>"},{"location":"Operators/bitwise-xor/","title":"Bitwise XOR","text":"<p>Bitwise XOR operator (<code>^</code>) can be used to perform binary XOR operation on two numbers.</p> Syntax<pre><code>operand1 ^ operand2\n</code></pre> Example<pre><code>a ^ b\n\n1 ^ 0\n# 1\n\n1 ^ 1\n# 0\n\n4 ^ 2\n# 6\n</code></pre>"},{"location":"Operators/call/","title":"Call","text":"<p>Call operator (<code>()</code>) is used to invoke a function. They may take in parameters.</p> Syntax<pre><code>operand1([param1, param2, ..., param3])\n</code></pre> Example<pre><code>someFunctionValue()\nsomeFunctionValue(a, b, c)\nmain()\ndisplay(a, b, c)\n</code></pre>"},{"location":"Operators/computed-member-access/","title":"Computed Member Access","text":"<p>Member Access operator (<code>.</code>) can be used to access properties of an object but they accessor is an expression.</p> Syntax<pre><code>object[expr]\n</code></pre> Example<pre><code>someObjectValue['propertyA']\nsomeObjectValue['propertyA']['propertyB']\n</code></pre>"},{"location":"Operators/declaration/","title":"Declaration","text":"<p>Declaration operator (<code>:=</code>) is used to declare a variable in the enclosing lexical scope. Variables cannot be re-declared.</p> Syntax<pre><code>variable := expr\n</code></pre> Example<pre><code>a := 2\nb := 3\n</code></pre>"},{"location":"Operators/division-assignment/","title":"Division Assignment","text":"<p>Division assignment operator (<code>/=</code>) can be used divide and assign value to a variable.</p> Syntax<pre><code>variable /= expr\n</code></pre> Example<pre><code>a /= 3\nb /= 4\n</code></pre>"},{"location":"Operators/division/","title":"Division","text":"<p>Division operator (<code>/</code>) can be used to divide two numbers.</p> Syntax<pre><code>operand1 / operand2\n</code></pre> Example<pre><code>10 / 3\n# 3.333\n</code></pre>"},{"location":"Operators/equality/","title":"Equality","text":"<p>Equality operator (<code>==</code>) can be used to find if two values are equal.</p> Syntax<pre><code>operand1 == operand2\n</code></pre> Example<pre><code>a == b\n\n1 == 2\n# false\n\n\"Hello\" == \"Hello\"\n# true\n\n\"Hello\" == \"World\"\n# false\n</code></pre>"},{"location":"Operators/exponent-assignment/","title":"Exponent Assignment","text":"<p>Exponent assignment operator (<code>**=</code>) can be used calculate exponent and assign it to a variable.</p> Syntax<pre><code>variable **= expr\n</code></pre> Example<pre><code>a **= 3\nb **= 4\n</code></pre>"},{"location":"Operators/exponent/","title":"Exponent","text":"<p>Exponent operator (<code>**</code>) can be used to calculate exponentiation result of two number.</p> Syntax<pre><code>operand1 ** operand2\n</code></pre> Example<pre><code>2 ** 3\n# 8\n</code></pre>"},{"location":"Operators/floor-division-assignment/","title":"Floor Division Assignment","text":"<p>Floor division assignment operator (<code>//=</code>) can be used floor divide and assign value to a variable.</p> Syntax<pre><code>variable //= expr\n</code></pre> Example<pre><code>a //= 3\nb //= 4\n</code></pre>"},{"location":"Operators/floor-division/","title":"Floor Division","text":"<p>Floor Division operator (<code>//</code>) can be used to floor divide two numbers. This performs floor on the result after division.</p> Syntax<pre><code>operand1 // operand2\n</code></pre> Example<pre><code>10 // 3\n# 3\n</code></pre>"},{"location":"Operators/greater-than-or-equal/","title":"Greater Than Or Equal","text":"<p>Greater Than Or Equal (<code>&gt;=</code>) can be used to find if <code>a</code> is greater than or equal to <code>b</code>.</p> Syntax<pre><code>operand1 &gt;= operand2\n</code></pre> Example<pre><code>a &gt;= b\n\n1 &gt;= 2\n# false\n\n3 &gt;= 3\n# true\n\n4 &gt;= 3\n# true\n</code></pre>"},{"location":"Operators/greater-than/","title":"Greater Than","text":"<p>Greater Than (<code>&gt;</code>) can be used to find if <code>a</code> is greater than <code>b</code>.</p> Syntax<pre><code>operand1 &gt; operand2\n</code></pre> Example<pre><code>a &gt; b\n\n1 &gt; 2\n# false\n\n4 &gt; 2\n# true\n</code></pre>"},{"location":"Operators/grouping/","title":"Grouping","text":"<p>Expressions surrounded by parenthesis (<code>()</code>) are evaluated first.</p> Syntax<pre><code>(expr)\n</code></pre> Example<pre><code>1 - (2 + 4)\n# -5\n</code></pre>"},{"location":"Operators/inequality/","title":"Inequality","text":"<p>Inequality operator (<code>!=</code>) can be used to find if two values are not equal.</p> Syntax<pre><code>operand1 != operand2\n</code></pre> Example<pre><code>a != b\n\n1 != 2\n# true\n\n\"Hello\" != \"Hello\"\n# false\n\n\"Hello\" != \"World\"\n# true\n</code></pre>"},{"location":"Operators/lesser-than-or-equal/","title":"Lesser Than Or Equal","text":"<p>Lesser Than Or Equal (<code>&lt;=</code>) can be used to find if <code>a</code> is lesser than or equal to <code>b</code>.</p> Syntax<pre><code>operand1 &lt;= operand2\n</code></pre> Example<pre><code>a &lt;= b\n\n1 &lt;= 2\n# true\n\n3 &lt;= 3\n# true\n\n4 &lt;= 3\n# false\n</code></pre>"},{"location":"Operators/lesser-than/","title":"Lesser Than","text":"<p>Lesser Than (<code>&lt;</code>) can be used to find if <code>a</code> is lesser than <code>b</code>.</p> Syntax<pre><code>operand1 &lt; operand2\n</code></pre> Example<pre><code>a &lt; b\n\n1 &lt; 2\n# true\n\n4 &lt; 2\n# false\n</code></pre>"},{"location":"Operators/logical-and-assignment/","title":"Logical AND Assignment","text":"<p>Logical AND assignment operator (<code>&amp;&amp;=</code>) can be used to perform logical AND operation and assign it to a variable.</p> Syntax<pre><code>variable &amp;&amp;= expr\n</code></pre> Example<pre><code>a &amp;&amp;= true\nb &amp;&amp;= false\n</code></pre>"},{"location":"Operators/logical-and/","title":"Logical AND","text":"<p>Logical AND operator (<code>&amp;&amp;</code>) returns <code>true</code> if both values are <code>true</code>.</p> Syntax<pre><code>operand1 &amp;&amp; operand2\n</code></pre> Example<pre><code>a &amp;&amp; b\n\ntrue &amp;&amp; true\n# true\n\ntrue &amp;&amp; false\n# false\n</code></pre>"},{"location":"Operators/logical-not/","title":"Logical NOT","text":"<p>Logical NOT operator (<code>!</code>) can be used to invert boolean or truthy value. This always returns a boolean value.</p> Syntax<pre><code>!operand1\n</code></pre> Example<pre><code>!true\n# false\n\n!false\n# true\n\n!someBooleanValue\n!someValue\n!!someValue\n</code></pre>"},{"location":"Operators/logical-or-assignment/","title":"Logical OR Assignment","text":"<p>Logical OR assignment operator (<code>||=</code>) can be used to perform logical OR operation and assign it to a variable.</p> Syntax<pre><code>variable ||= expr\n</code></pre> Example<pre><code>a ||= true\nb ||= false\n</code></pre>"},{"location":"Operators/logical-or/","title":"Logical OR","text":"<p>Logical OR operator (<code>||</code>) returns <code>true</code> if atleast one of two values is <code>true</code>.</p> Syntax<pre><code>operand1 || operand2\n</code></pre> Example<pre><code>a || b\n\ntrue || false\n# true\n\nfalse || false\n# false\n</code></pre>"},{"location":"Operators/member-access/","title":"Member Access","text":"<p>Member Access operator (<code>.</code>) can be used to access properties of an object.</p> Syntax<pre><code>object.property\n</code></pre> Example<pre><code>someObjectValue.propertyA\nsomeObjectValue.propertyA.propertyB\n</code></pre>"},{"location":"Operators/multiplication-assignment/","title":"Multiplication Assignment","text":"<p>Multiplication assignment operator (<code>*=</code>) can be used multiply and assign value to a variable.</p> Syntax<pre><code>variable *= expr\n</code></pre> Example<pre><code>a *= 3\nb *= 4\n</code></pre>"},{"location":"Operators/multiplication/","title":"Multiplication","text":"<p>Multiplication operator (<code>*</code>) can be used to multiply two numbers.</p> Syntax<pre><code>operand1 * operand2\n</code></pre> Example<pre><code>9 * 2\n# 18\n</code></pre>"},{"location":"Operators/nullable-access/","title":"Nullable Access","text":"<p>Nullable Access operator (<code>?.</code>) can be used to access properties of an object or <code>null</code>. This returns <code>null</code>, if the accessor is on a <code>null</code> value.</p> Syntax<pre><code>value?.property\n</code></pre> Example<pre><code>someObjectValueOrNull?.propertyA\nsomeObjectValueOrNull?.propertyA.propertyB\n\n# can also be used with computed member access\nsomeObjectValueOrNull?.['propertyA']\n\n# can also be used with calls\nsomeFunctionValueOrNull?.()\n</code></pre>"},{"location":"Operators/nullable-assignment/","title":"Nullable Assignment","text":"<p>Nullable assignment operator (<code>??=</code>) can be used assign value if the variable is <code>null</code>.</p> Syntax<pre><code>variable ??= expr\n</code></pre> Example<pre><code>a ??= \"Hello\"\nb ??= 1\n</code></pre>"},{"location":"Operators/nullable-or/","title":"Nullable OR","text":"<p>Nullable OR operator (<code>??</code>) can be used to return a alternative value when the primary value is <code>null</code>, i.e. returns right-hand side value if left-hand side value is <code>null</code>.</p> Syntax<pre><code>expr1 ?? expr2\n</code></pre> Example<pre><code>a ?? b\n\nnull ?? 2\n# 2\n\n1 ?? 2\n# 1\n</code></pre>"},{"location":"Operators/remainder-assignment/","title":"Remainder Assignment","text":"<p>Remainder assignment operator (<code>%=</code>) can be used calculate remainder and assign it to a variable.</p> Syntax<pre><code>variable %= expr\n</code></pre> Example<pre><code>a %= 3\nb %= 4\n</code></pre>"},{"location":"Operators/remainder/","title":"Remainder","text":"<p>Remainder operator (<code>%</code>) can be used to get remainder from division of two numbers.</p> Syntax<pre><code>operand1 % operand2\n</code></pre> Example<pre><code>11 % 2\n# 1\n</code></pre>"},{"location":"Operators/subtraction-assignment/","title":"Subtraction Assignment","text":"<p>Subtraction assignment operator (<code>-=</code>) can be used subtract and assign value to a variable.</p> Syntax<pre><code>variable -= expr\n</code></pre> Example<pre><code>a -= 3\nb -= 4\n</code></pre>"},{"location":"Operators/subtraction/","title":"Subtraction","text":"<p>Subtraction operator (<code>-</code>) can be used to subtract two numbers.</p> Syntax<pre><code>operand1 - operand2\n</code></pre> Example<pre><code>5 - 2\n# 3\n</code></pre>"},{"location":"Operators/ternary/","title":"Ternary Operator","text":"<p>Ternary operator (<code>?:</code>) has a condition and two values that is evaluated as per the truthiness of the condition.</p> Syntax<pre><code>condition ? trueExpr : falseExpr\n</code></pre> Example<pre><code>1 &gt; 2 ? \"Yes!\" : \"No!\"\n# No!\n\n4 &lt; 2 ? 2 : 4\n# 4\n</code></pre>"},{"location":"Operators/unary-negation/","title":"Unary Negation","text":"<p>Unary negation operator (<code>-</code>) can be used to represent a negative number or to invert the sign of a number.</p> Syntax<pre><code>+operand1\n</code></pre> Example<pre><code>-50\n-12.1\n-0\n-someNumberValue\n</code></pre>"},{"location":"Operators/unary-plus/","title":"Unary Plus","text":"<p>Unary plus operator (<code>+</code>) can be used to represent a positive number.</p> Syntax<pre><code>+operand1\n</code></pre> Example<pre><code>+20\n+45.6\n+0\n+someNumberValue\n</code></pre>"},{"location":"Statements/block/","title":"Block Statement","text":"<p>Creates a lexical scope and contains a sequence of statements.</p> Syntax<pre><code>{\n    statement1\n    statement2\n    ...\n    statementN\n}\n</code></pre> Example<pre><code>{\n    a := 2;\n\n    # prints 2\n    print(a);\n}\n</code></pre>"},{"location":"Statements/break/","title":"Break Statement","text":"<p>Break statement can be used to terminate the enclosing loop. This is done using the <code>break</code> keyword.</p> Syntax<pre><code>break;\n</code></pre> Example<pre><code>i := 0;\nwhile (true) {\n    print(i);\n    i++;\n    if (i &gt; 2) break;\n}\n\n# prints,\n#   0\n#   1\n#   2\n</code></pre>"},{"location":"Statements/continue/","title":"Continue Statement","text":"<p>Continue statement can be used to skip current iteration. This is done using the <code>continue</code> keyword.</p> Syntax<pre><code>continue;\n</code></pre> Example<pre><code>i := 0;\nwhile (i &lt; 6) {\n    i++;\n    if (i % 2 == 0) continue;\n    print(i);\n}\n\n# prints,\n#   1\n#   3\n#   5\n</code></pre>"},{"location":"Statements/expression/","title":"Expression Statement","text":"<p>Contains nothing but an expression.</p> Syntax<pre><code>expr;\n</code></pre> Example<pre><code>1 + 1;\n\"Hello World\";\nhelloWorld;\n</code></pre>"},{"location":"Statements/for/","title":"For Statement","text":"<p>For statement has three main parts, the initialization, the condition and the increment or decrement. It executes the set of code until the condition goes falsey. <code>break</code> and <code>continue</code> statement can be used inside a <code>for</code> loop.</p> Syntax<pre><code>for ([initialization]; [condition]; [increment/decrement]) {\n    statement\n}\n</code></pre> Example<pre><code>for (i := 0; i &lt; 5; i++) {\n    print(i);\n}\n# prints,\n#   0\n#   1\n#   2\n#   3\n#   4\n\nfor (;;) {\n    print(\"Hello!\");\n}\n# prints \"Hello!\" infinitely\n</code></pre>"},{"location":"Statements/if-else/","title":"If-Else Statement","text":"<p>If-else statement is a conditional control-flow statement that allows skipping code. Supports simple <code>if</code>, <code>if-else</code> and <code>if-else</code> ladder.</p> Syntax<pre><code>if (condition)\n    statement1\n\nif (condition)\n    statement1\nelse\n    statement2\n\nif (condition1)\n    statement1\nelse if (condition2)\n    statement2\nelse\n    statement3\n</code></pre> Example<pre><code># prints \"Hello World\"\nif (true) print(\"Hello World\");\n\nif (false) print(\"Hello World\");\nelse print(\"Goodbye World\");\n\ntext := \"\";\nif (true) {\n    text = \"Hello World\";\n} else {\n    text = \"Goodbye World\";\n}\n\n# prints \"Hello World\"\nprint(text);\n</code></pre>"},{"location":"Statements/import/","title":"Import Statements","text":"<p>Import statements are used to import other modules into current module. The top-most lexical scope of the module is mirrored.</p> Syntax<pre><code>import \"filename\" as variable;\n</code></pre> Example<pre><code>import \"utils.fbs\" as utils;\n\n# prints \"Hello World!\"\nprint(utils.helloWorld);\n\n# prints \"Hello World!\"\nutils.displayHelloWorld();\n</code></pre>"},{"location":"Statements/match/","title":"Match Statement","text":"<p>Match statements can be used to match values against the case values. Each case takes in an expression that evaluates to a value, and is executed if they are equal. The <code>else</code> case is invoked if none matches. Atmost one case is executed.</p> Syntax<pre><code>match (expr) {\n    expr1: statement1\n    expr2: statement2\n    ...\n    exprN: statementN\n    else: elseStatement\n}\n</code></pre> Example<pre><code>a := 0;\nmatch (a) {\n    -1: {\n        print(\"Found: -1\");\n    }\n    0: print(\"Found: 0\");\n    1: print(\"Found: 1\");\n    else: print(a);\n}\n\n# prints \"Found: 0\"\n</code></pre>"},{"location":"Statements/print/","title":"Print Statement","text":"<p>Print statement is used to print a value to the terminal. This is done using the <code>print</code> keyword. This statement cannot be used if <code>disablePrint</code> is set to <code>true</code>.</p> Syntax<pre><code>print(expr);\n</code></pre> Example<pre><code># prints 1\nprint(1);\n\n# prints \"Hello World\"\nprint(\"Hello World\");\n</code></pre>"},{"location":"Statements/return/","title":"Return Statement","text":"<p>Return statement is used to return a value from the function body to it's call. This is done using the <code>return</code> keyword. If no value is specified, <code>null</code> value is returned.</p> Syntax<pre><code>return;\nreturn expr;\n</code></pre> Example<pre><code>return;\nreturn null;\nreturn \"Hello World\";\n</code></pre>"},{"location":"Statements/throw/","title":"Throw Statement","text":"<p>Throw statements can be used to propogate exceptions. This is done using the <code>throw</code> keyword.</p> Syntax<pre><code>throw expr;\n</code></pre> Example<pre><code>throw \"Hello World!\";\nthrow Exception.new(\"Oops!\");\n</code></pre>"},{"location":"Statements/try-catch/","title":"Try-Catch Statement","text":"<p>Try-catch statement is used to handle exceptions and unintended behaviours. Try-catch consists a <code>try</code> block that might throw exceptions and <code>catch</code> block that handles the exception.</p> Syntax<pre><code>try {\n    tryStatement\n} catch (exception) {\n    catchStatement\n}\n</code></pre> Example<pre><code>try {\n    throw \"Hello World!\";\n} catch (err) {\n    print(err);\n}\n\n# prints \"Hello World!\"\n</code></pre>"},{"location":"Statements/when/","title":"When Statement","text":"<p>When statements can be used as an alternative to <code>if-else</code> ladder. Each case takes in an conditional expression, and is executed if they are truthy. The <code>else</code> case is invoked if none evaluates to a truthy value. Atmost one case is executed.</p> Syntax<pre><code>when {\n    expr1: statement1\n    expr2: statement2\n    ...\n    exprN: statementN\n    else: elseStatement\n}\n</code></pre> Example<pre><code>a := 2;\nb := 3;\nwhen {\n    a &gt; b: {\n        print(\"Yes\");\n    }\n    else: print(\"No\");\n}\n\n# prints \"No\"\n</code></pre>"},{"location":"Statements/while/","title":"While Statement","text":"<p>While statement allows repeating a set of code until the condition goes falsey. <code>break</code> and <code>continue</code> statement can be used inside a <code>while</code> loop.</p> Syntax<pre><code>while (condition) {\n    statement\n}\n</code></pre> Example<pre><code>i := 0;\nwhile (i &lt; 5) {\n    print(i);\n    i++;\n}\n\n# prints,\n#   0\n#   1\n#   2\n#   3\n#   4\n</code></pre>"}]}