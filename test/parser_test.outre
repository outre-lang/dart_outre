# include "console"

textIdent := "Hello\x09World!"
rawTextIdent := r"Hello\x09World!"
numberIdent := 10
plusIdent := 2 + 2
minusIdent := 2 - 2
asteriskIdent := 2 * 2
exponentIdent := 2 ** 2
slashIdent := 2 / 2
floorIdent := 2 // 2
moduloIdent := 2 % 2
ampersandIdent := 0 & 1
andIdent := true && false
pipeIdent := 0 | 1
orIdent := true || false
caretIdent := 0 ^ 1
tidleIdent := ~ 0
equalIdent := 2 == 2
notEqualIdent := 2 != 2
lesserThanIdent := 2 < 2
greaterThanIdent := 2 > 2
lesserThanEqualIdent := 2 <= 2
greaterThanEqualIdent := 2 >= 2
groupedIdent := 1 + (2 * 3 / 4)
trueIdent := true
falseIdent := false
nullIdent := null
fnIdent := fn () return null;
boolFnIdent := fn () return falseIdent
fnNoParamIdent := fn return;
emptyListIdent := []
listIdent := [true, 1, "hello"]
emptyObjIdent := obj {}
objIdent := obj {
    'hello': true,
    'world': '',
    textIdent: fn return;,
    0: 'hello',
    1: 'world',
}
objIdent.hello
objIdent.world
objIdent.textIdent
objIdent['hello']
objIdent["world"]
objIdent[textIdent];
objIdent[0]
objIdent[1]

dummyIdent1 := 5
dummyIdent2 := 10;
dummyIdent1;
dummyIdent1 = nullIdent ?? dummyIdent1
dummyIdent2 = objIdent.non?.existing?.prop ?? dummyIdent2
ternaryLikeIdent := trueIdent ? "hello" : "world"
ternaryLike1Ident := objIdent["hello"] ? "hello" : "world"
ternaryLike2Ident := objIdent[objIdent["hello"] ? 0 : 1]
assignUseIdent := (dummyIdent1 = (dummyIdent2 = 15))

fnCallIdent := boolFnIdent() ? "hello" : "world";
fnNoParamIdent();

(fn return;)();
(fn return null)();

if (trueIdent) {
} else if (falseIdent) {
} else {}

while (trueIdent) {
    break
};

try {
    throw 'test';
} catch (err, stackTrace) {}

(fn return "the end")();
